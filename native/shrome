#!/usr/bin/env python3

import socket
import sys
import os
import struct

def stderr(msg):
    print(msg, file=sys.stderr)
    sys.stderr.flush()

def std_send(query):
    sys.stdout.buffer.write(struct.pack('I', len(query))) # python3
    sys.stdout.buffer.write(query)
    sys.stdout.flush()

def std_receive():
    message_length_bytes = sys.stdin.buffer.read(4) # python3
    if len(message_length_bytes) == 0:
        sys.exit(0)
    message_length = struct.unpack('i', message_length_bytes)[0]
    message = sys.stdin.buffer.read(message_length)
    return message

def socket_accept(server):
    try:
        sock, addr = server.accept()
        stderr("new client {}".format(addr))
        return sock
    except BlockingIOError:
        raise BlockingIOError

def socket_receive(sock):
    try:
        message = sock.recv(4096)
        return message
    except BlockingIOError:
        raise BlockingIOError

def socket_send(sock, message):
    try:
        sock.sendall(message)
    except Exception as e:
        raise e

def main():
    shrome_sock = '/tmp/shrome'

    stderr('======initializing shrome======')
    server = socket.socket(socket.AF_UNIX)
    if os.path.exists(shrome_sock):
        os.remove(shrome_sock)
    server.bind(shrome_sock)
    server.listen()
    stderr('server started')

    while True:
        stderr('waiting for sock...')
        sock = socket_accept(server)
        stderr("receiving query...")
        query = socket_receive(sock)
        stderr("query: {}".format(query))
        while not query == b'':
            stderr("sending query to chrome...")
            std_send(query)
            response = std_receive()
            stderr("response: {}".format(response))
            stderr("sending response to sock...")
            socket_send(sock, response)
            query = socket_receive(sock)
        stderr("sock closed.")
    server.close()
    os.remove(shrome_sock)

if __name__ == "__main__":
    main()
