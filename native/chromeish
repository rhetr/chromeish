#!/usr/bin/env python3
# chromeish client

import socket
import sys
import os
import random
import string
import json
import argparse

def setup_socket():
    client = socket.socket(socket.AF_UNIX)
    while True:
        try:
            rand = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(10))
            path = "/tmp/chromeish-{}".format(rand)
            client.bind(path)
        except OSError:
            continue
        break

    try: client.connect("/tmp/shrome")
    except (ConnectionRefusedError, FileNotFoundError):
        print("shrome not running", file=sys.stderr)
        sys.exit()
    return client, path

def sysargs_json():
    main_parser = argparse.ArgumentParser()
    # main_parser.add_argument('cmd')

    key_parser = argparse.ArgumentParser(add_help=False)
    key_parser.add_argument('--key', default='id')
    key_parser.add_argument('tabs', nargs='*')

    window_parser = argparse.ArgumentParser(add_help=False)

    #TODO: set proper defaults
    window_parser.add_argument('--index', '-n', type=int, default=-1)
    window_parser.add_argument('--window_parser', '-w', type=int, default=0) 
    window_parser.add_argument('--new', '-N', action='store_const', const=True, default=False)

    subparsers = main_parser.add_subparsers(dest='cmd')
    subparsers.required = True

    echo = subparsers.add_parser('echo')
    echo.add_argument('string', nargs='*', default=[])
    
    ping = subparsers.add_parser('ping')

    ls = subparsers.add_parser('list', aliases=['ls'])
    ls.add_argument('--show', default='tuin', choices=list('tuinwdpasl'))
    ls.add_argument('-l', '--list', action='store_const', const=True, default=False)
    ls.add_argument('-s', '--settings', action='store_const', const=True, default=False)
    ls.add_argument('-i', '--incognito', action='store_const', const=True, default=False)

    info = subparsers.add_parser('info', aliases=['i'], parents=[key_parser])
    cat = subparsers.add_parser('cat', parents=[key_parser])
    remove = subparsers.add_parser('remove', aliases=['rm','close'], parents=[key_parser])
    refresh = subparsers.add_parser('refresh', aliases=['reload, r'], parents=[key_parser])
    disable = subparsers.add_parser('disable', aliases=['discard'], parents=[key_parser])

    move = subparsers.add_parser('move', aliases=['mv'], parents=[key_parser, window_parser])

    new = subparsers.add_parser('open')
    new.add_argument('urls', nargs='*')


    args = main_parser.parse_args()
    return json.dumps(vars(args))

def main():
    args_json = sysargs_json()

    client, path = setup_socket()
    client.sendall(args_json.encode())

    json_result = client.recvfrom(4096)[0].decode()
    result = json.loads(json_result)
    print(result['result'])

    client.close()
    os.remove(path)


if __name__ == "__main__":
    main()
