#!/usr/bin/env python3
# chromeish client

import socket
import sys
import os
import random
import string
import json
from argparse import ArgumentParser, HelpFormatter
from operator import attrgetter

OK = 0
ERR = 1 

class SortingHelpFormatter(HelpFormatter):
    def add_arguments(self, actions):
        actions = sorted(actions, key=attrgetter('option_strings'))
        super().add_arguments(actions)

def setup_socket():
    client = socket.socket(socket.AF_UNIX)
    while True:
        try:
            rand = ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(10))
            path = "/tmp/chromeish-{}".format(rand)
            client.bind(path)
        except OSError:
            continue
        break

    try: client.connect("/tmp/shrome")
    except (ConnectionRefusedError, FileNotFoundError):
        print("shrome not running", file=sys.stderr)
        sys.exit()
    return client, path

def sysargs_json():
    main_parser = ArgumentParser(
            formatter_class=SortingHelpFormatter,
            description="~interact with Chrome via bash~")

    key_parser = ArgumentParser(add_help=False)
    key_parser.add_argument('--key', choices=["title","url","id"], default='id', help="the key used to reference the tab(s) (defaults to id)")
    key_parser.add_argument('tabs', nargs='*', help="the tab(s) to be queried")
    window_parser = ArgumentParser(add_help=False)
    window_parser.add_argument('--index', '-n', type=int, default=0, help="tab index")
    window_parser.add_argument('--window_id', '-w', type=int, help="window id")
    window_parser.add_argument('--new', '-N', action='store_const', const=True, default=False, help="open in a new window")

    subparsers = main_parser.add_subparsers(dest='cmd')
    subparsers.required = True

    cat = subparsers.add_parser('cat', parents=[key_parser], description="print the contents of a tab", formatter_class=SortingHelpFormatter)
    close = subparsers.add_parser('close', parents=[key_parser], description="close a tab", formatter_class=SortingHelpFormatter)
    disable = subparsers.add_parser('disable', parents=[key_parser], description="disable a tab", formatter_class=SortingHelpFormatter)
    echo = subparsers.add_parser('echo', formatter_class=SortingHelpFormatter)
    focus = subparsers.add_parser('focus', parents=[key_parser], description="focus a tab", formatter_class=SortingHelpFormatter)
    info = subparsers.add_parser('info', parents=[key_parser], description="get tab info", formatter_class=SortingHelpFormatter)
    ls = subparsers.add_parser('ls', description="list tabs", formatter_class=SortingHelpFormatter)
    move = subparsers.add_parser('mv', parents=[key_parser, window_parser], description="move a tab", formatter_class=SortingHelpFormatter)
    new = subparsers.add_parser('open', description="open a tab", parents=[window_parser], formatter_class=SortingHelpFormatter)
    ping = subparsers.add_parser('ping', formatter_class=SortingHelpFormatter)
    refresh = subparsers.add_parser('reload', parents=[key_parser], description="reload a tab", formatter_class=SortingHelpFormatter)

    echo.add_argument('string', nargs='*', default=[], help="the string to echo")
    ls.add_argument('--show', default='tuin', choices=list('tuinwdpasl'), help="fields: [t]itle, [u]rl, [i]d, i[n]dex, [w]indow id, [d]isabled, [p]inned, [a]udible, [s]tatus")
    ls.add_argument('-l', '--list', action='store_const', const=True, default=False, help="show all fields")
    ls.add_argument('-s', '--settings', action='store_const', const=True, default=False, help="include settings pages")
    ls.add_argument('-i', '--incognito', action='store_const', const=True, default=False, help="include incognito pages")
    new.add_argument('urls', nargs='*', help="url(s) to open")
    new.add_argument('--incognito', '-i', action='store_const', const=True, default=False, help="open in incognito mode")

    keyed = {
            'info': info,
            'focus': focus,
            'cat': cat,
            'close': close,
            'rm': close,
            'reload': refresh,
            'disable': disable,
            'move': move,
            'mv': move
            }

    # print(dir(main_parser._subparsers._registries.items))
    # print(main_parser._subparsers._registries.items())
    # sys.exit()
    args = main_parser.parse_args()
    if args.cmd == 'open' and not args.urls:
        new.error('URL(s) required')
    elif args.cmd in keyed and not args.tabs:
        keyed[args.cmd].error('tab(s) required')
    return json.dumps(vars(args))

def main():
    args_json = sysargs_json()

    client, path = setup_socket()
    client.sendall(args_json.encode())

    json_result = client.recvfrom(4096)[0].decode()
    result = json.loads(json_result)
    if result['status'] == OK:
        if 'result' in result:
            print(result['result'])
        else:
            print('done')
    elif result['status'] == ERR:
        print("Err: {}".format(result), file=sys.stderr)
    else:
        print("oops, something happened", file=sys.stderr)

    client.close()
    os.remove(path)


if __name__ == "__main__":
    main()
